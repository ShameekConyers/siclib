from typing import Callable, List

from typing import overload
import numpy

class Tensor:
    @overload
    def __init__(self, numpy_array: numpy.ndarray[numpy.float64]) -> None: ...
    @overload
    def __init__(self, input_data: List[float], input_shape: List[int] = ..., input_stride: List[int] = ..., offset: int = ...) -> None: ...
    @overload
    def __init__(self, other_view: Tensor, input_shape: List[int] = ..., input_stride: List[int] = ..., offset: int = ...) -> None: ...
    def binary_element_wise_op(self, arg0: Tensor, arg1: Callable[[float,float],float]) -> Tensor: ...
    def get_buffer(self) -> List[float]: ...
    @property
    def m_offset(self) -> int: ...
    @property
    def m_shape(self) -> List[int]: ...
    @property
    def m_stride(self) -> List[int]: ...
